package backEnd.analisisLexSintax;

import java_cup.runtime.*;
import backEnd.semantic.*;
import backEnd.Objects.*;
import backEnd.Objects.funtion.*;
import backEnd.langConstants.languageConstants;
import GUI.codeEditor;

parser code {:

	private semanticManager semanticM;
	languageConstants lanC = new languageConstants();
	private codeEditor codeE;

	public sintactico(Lexer lex, semanticManager semanticM){
		super(lex);
		this.semanticM = semanticM;
	}

    @Override
	public void syntax_error(Symbol cur_token) {
		String message = "Estructura invalida en Columna: " + cur_token.right
			 + " Fila: " + cur_token.left + " , token: " + cur_token.value;
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<");	 
		System.out.println(message);
        semanticM.errorAndPlace(lanC.AN_SINTACTICO, message);
		System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
	}
:}

/* Terminal */
terminal String NamInt, NamFloat, NamBoolean, NamString, NamMain, NamIf, NamWhile;
terminal String PrintN, PrintS, BreakCom, Mas, Menos, Por, Div, Mayor, Menor, Igual, And;
terminal String Or, Asignacion, EndCom, ParAbierto, ParCerrado, Coma, Booleano, Cadena;
terminal String Entero,Decimal,Identificador, NamElse, Diferente, CorCerrado, CorAbierto;
/*terminal int Entero;
terminal float Decimal;
*/
/* Non terminal */
non terminal String CODIGO, INICIO_CODIGO;
non terminal Boolean MAIN_IDE, MAIN_BODY, MAIN_FUNCION, CUERPO_CODIGO;
non terminal Boolean WHILE_FUNCION, PRINT_FUNCION, PRINT_OPTION;
non terminal tempVar OPERACION;
non terminal cicleFlag IF_ELSE, IF_ELSE_FUNCION;
/*non terminal cicleFlag IF_FUNCION;*/  
non terminal tempFinalVar ID_VAR;
non terminal Integer DECLARACION_VAR; 
/*Precedence*/
precedence left And, Or;
precedence left Igual, Diferente;
precedence left Menor, Mayor;
precedence left Mas, Menos;
precedence left Por, Div;


//start with DECLARACION_VAR;

start with INICIO_CODIGO;

INICIO_CODIGO	::= CODIGO 						{:  :}
					;

CODIGO 			::=	CUERPO_CODIGO CODIGO		{: :}
					| MAIN_IDE:e CorCerrado		{: :}
					;

CUERPO_CODIGO	::=	DECLARACION_VAR EndCom		{: :}
					;

MAIN_IDE		::=	NamMain ParAbierto ParCerrado CorAbierto MAIN_BODY:e	{:  :}
					;

MAIN_BODY		::=	MAIN_BODY MAIN_FUNCION:e	{:  :}
					| MAIN_FUNCION:e			{:  :}
					;

MAIN_FUNCION	::=	IF_ELSE_FUNCION:e			{:  :}
					| PRINT_FUNCION:e			{:  :}
					| WHILE_FUNCION:e			{:  :}
					| DECLARACION_VAR EndCom	{:  :}
					| ID_VAR:e1 EndCom:e2		{: semanticM.modifyValue(e1,e2left); :}
					| BreakCom:e EndCom			{: semanticM.functions.breakFound(eleft, eright); :}
					;

DECLARACION_VAR	::=	DECLARACION_VAR:e1 Coma:e3 ID_VAR:e2	{: semanticM.addVariableToList(e1, e2, e3left, e3right); 		  RESULT = e1; :}
					| NamInt:e3 ID_VAR:e1					{: semanticM.addVariableToList(lanC.INTEGER,e1, e3left, e3right); RESULT = lanC.INTEGER;:}
					| NamBoolean:e3 ID_VAR:e1				{: semanticM.addVariableToList(lanC.BOOLEAN,e1, e3left, e3right); RESULT = lanC.BOOLEAN;:}
					| NamFloat:e3 ID_VAR:e1					{: semanticM.addVariableToList(lanC.FLOAT, 	e1, e3left, e3right); RESULT = lanC.FLOAT;	:}
					| NamString:e3 ID_VAR:e1				{: semanticM.addVariableToList(lanC.STRING, e1, e3left, e3right); RESULT = lanC.STRING;	:}
					;

ID_VAR			::=	Identificador:e								{: RESULT = semanticM.operations.varToSave(e, new tempVar(lanC.NO_TYPE_AUX,eleft, eright)); :}
					| Identificador:e1 Asignacion OPERACION:e2 	{: RESULT = semanticM.operations.varToSave(e1, e2); :}
					;

OPERACION		::=	OPERACION:e1 Mas:e3 OPERACION:e2 			{: RESULT = semanticM.operations.operation(lanC.MAS, 	e1, e2, e3left, e3right); :}
					| OPERACION:e1 Menos:e3 OPERACION:e2 		{: RESULT = semanticM.operations.operation(lanC.MENOS, 	e1, e2, e3left, e3right); :}
					| OPERACION:e1 Por:e3 OPERACION:e2 			{: RESULT = semanticM.operations.operation(lanC.POR, 	e1, e2, e3left, e3right); :}
					| OPERACION:e1 Div:e3 OPERACION:e2 			{: RESULT = semanticM.operations.operation(lanC.DIV, 	e1, e2, e3left, e3right); :}
					| OPERACION:e1 Menor:e3 OPERACION:e2 		{: RESULT = semanticM.operations.operation(lanC.MENOR_Q,e1, e2, e3left, e3right); :}
					| OPERACION:e1 Mayor:e3 OPERACION:e2 		{: RESULT = semanticM.operations.operation(lanC.MAYOR_Q,e1, e2, e3left, e3right); :}
					| OPERACION:e1 Igual:e3 OPERACION:e2 		{: RESULT = semanticM.operations.operation(lanC.IGUAL, 	e1, e2, e3left, e3right); :}
					| OPERACION:e1 Diferente:e3 OPERACION:e2 	{: RESULT = semanticM.operations.operation(lanC.DIF, 	e1, e2, e3left, e3right); :}
					| OPERACION:e1 Or:e3 OPERACION:e2 			{: RESULT = semanticM.operations.operation(lanC.OR, 	e1, e2, e3left, e3right); :}
					| OPERACION:e1 And:e3 OPERACION:e2			{: RESULT = semanticM.operations.operation(lanC.AND, 	e1, e2, e3left, e3right); :}
					| ParAbierto OPERACION:e ParCerrado			{: RESULT = e; :}
					| Menos Entero:e							{: RESULT = new tempVar(-Integer.parseInt(e),	lanC.INTEGER,	eleft, eright); :}
					| Menos Decimal:e							{: RESULT = new tempVar(-Float.parseFloat(e),	lanC.FLOAT, 	eleft, eright); :}
					| Entero:e									{: RESULT = new tempVar(Integer.parseInt(e),	lanC.INTEGER, 	eleft, eright); :}
					| Decimal:e									{: RESULT = new tempVar(Float.parseFloat(e),	lanC.FLOAT, 	eleft, eright); :}
					| Booleano:e 								{: RESULT = new tempVar(Boolean.valueOf(e),		lanC.BOOLEAN,	eleft, eright); :}
					| Cadena:e 		 							{: RESULT = new tempVar(lanC.clearString(e),	lanC.STRING,	eleft, eright); :}
					| Identificador:e 							{: RESULT = semanticM.getTempVarFromList(e, eleft, eright); :}
					;

IF_ELSE_FUNCION	::= IF_ELSE:e1 							{: semanticM.functions.setJumpFlag(e1); :}
					| IF_ELSE:e3 NamElse CorAbierto:e1	{: semanticM.functions.elseCycle(e1left, e1right); :}
					MAIN_BODY CorCerrado:e2				{: semanticM.functions.closeElseCycle(e2left, e2right, e3); :}
					;

IF_ELSE 		::= IF_ELSE:e4 NamElse NamIf ParAbierto 
					  OPERACION:e1 ParCerrado CorAbierto:e2 				{: RESULT = semanticM.functions.ifCycleInit(e1, e1left, e1right, e2left, e2right, e4); :}
					  MAIN_BODY CorCerrado:e3 								{: semanticM.functions.closeIfCycle(e3left, e3right); :}
					| NamIf ParAbierto OPERACION:e1 ParCerrado CorAbierto:e2 {: RESULT = semanticM.functions.ifCycleInit(e1, e1left, e1right, e2left, e2right,null); :}
					  MAIN_BODY CorCerrado:e3 								{: semanticM.functions.closeIfCycle(e3left, e3right); :}
					;
/*
IF_FUNCION 		::= NamIf ParAbierto OPERACION:e1 ParCerrado CorAbierto:e2	{: RESULT = semanticM.functions.ifCycleInit(e1, e1left, e1right, e2left, e2right); :}
					MAIN_BODY CorCerrado:e3 								{: semanticM.functions.closeIfCycle(e3left, e3right); :}
					;
*/
WHILE_FUNCION	::= NamWhile:e1 										{: semanticM.functions.startWhileCycle(e1left, e1right); :}
					ParAbierto OPERACION:e2 ParCerrado CorAbierto:e3 	{: semanticM.functions.whileCycleInit(e2, e2left, e2right, e3left, e3right); :}
					MAIN_BODY CorCerrado:e4 							{: semanticM.functions.closeWhileCycle(e4left, e4right); :}
					;

PRINT_FUNCION	::= PRINT_OPTION ParAbierto:e1 OPERACION:e2 ParCerrado EndCom	{: semanticM.functions.correctStringPrint(e2, e1left, e1right); :}
					;

PRINT_OPTION	::= PrintN 		{: :}
					| PrintS	{: :}
					;