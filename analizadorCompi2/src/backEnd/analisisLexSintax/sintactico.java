//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package backEnd.analisisLexSintax;

import java_cup.runtime.*;
import backEnd.semantic.*;
import backEnd.Objects.*;
import backEnd.Objects.funtion.*;
import backEnd.langConstants.languageConstants;
import GUI.codeEditor;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public sintactico() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public sintactico(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\064\000\002\002\004\000\002\003\003\000\002\002"
        + "\004\000\002\002\004\000\002\007\004\000\002\004\007"
        + "\000\002\005\004\000\002\005\003\000\002\006\003\000"
        + "\002\006\003\000\002\006\003\000\002\006\004\000\002"
        + "\006\004\000\002\006\004\000\002\017\005\000\002\017"
        + "\004\000\002\017\004\000\002\017\004\000\002\017\004"
        + "\000\002\016\003\000\002\016\005\000\002\013\005\000"
        + "\002\013\005\000\002\013\005\000\002\013\005\000\002"
        + "\013\005\000\002\013\005\000\002\013\005\000\002\013"
        + "\005\000\002\013\005\000\002\013\005\000\002\013\005"
        + "\000\002\013\004\000\002\013\004\000\002\013\003\000"
        + "\002\013\003\000\002\013\003\000\002\013\003\000\002"
        + "\013\003\000\002\015\003\000\002\020\002\000\002\015"
        + "\010\000\002\021\002\000\002\014\014\000\002\022\002"
        + "\000\002\014\012\000\002\023\002\000\002\024\002\000"
        + "\002\010\013\000\002\011\007\000\002\012\003\000\002"
        + "\012\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\154\000\014\004\014\005\004\006\015\007\006\010"
        + "\007\001\002\000\004\040\017\001\002\000\014\004\014"
        + "\005\004\006\015\007\006\010\007\001\002\000\004\040"
        + "\017\001\002\000\004\031\067\001\002\000\004\002\066"
        + "\001\002\000\006\030\064\033\063\001\002\000\004\043"
        + "\062\001\002\000\004\002\000\001\002\000\004\040\017"
        + "\001\002\000\004\040\017\001\002\000\006\030\ufff1\033"
        + "\ufff1\001\002\000\010\027\020\030\uffee\033\uffee\001\002"
        + "\000\020\017\022\031\021\034\023\035\026\036\027\037"
        + "\030\040\025\001\002\000\020\017\022\031\021\034\023"
        + "\035\026\036\027\037\030\040\025\001\002\000\006\036"
        + "\056\037\055\001\002\000\034\016\uffdd\017\uffdd\020\uffdd"
        + "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030"
        + "\uffdd\032\uffdd\033\uffdd\042\uffdd\001\002\000\032\016\042"
        + "\017\032\020\041\021\031\022\036\023\033\024\037\025"
        + "\034\026\035\030\uffed\033\uffed\042\040\001\002\000\034"
        + "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024"
        + "\uffdb\025\uffdb\026\uffdb\030\uffdb\032\uffdb\033\uffdb\042\uffdb"
        + "\001\002\000\034\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022"
        + "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\032\uffdc"
        + "\033\uffdc\042\uffdc\001\002\000\034\016\uffdf\017\uffdf\020"
        + "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf"
        + "\030\uffdf\032\uffdf\033\uffdf\042\uffdf\001\002\000\034\016"
        + "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde"
        + "\025\uffde\026\uffde\030\uffde\032\uffde\033\uffde\042\uffde\001"
        + "\002\000\020\017\022\031\021\034\023\035\026\036\027"
        + "\037\030\040\025\001\002\000\020\017\022\031\021\034"
        + "\023\035\026\036\027\037\030\040\025\001\002\000\020"
        + "\017\022\031\021\034\023\035\026\036\027\037\030\040"
        + "\025\001\002\000\020\017\022\031\021\034\023\035\026"
        + "\036\027\037\030\040\025\001\002\000\020\017\022\031"
        + "\021\034\023\035\026\036\027\037\030\040\025\001\002"
        + "\000\020\017\022\031\021\034\023\035\026\036\027\037"
        + "\030\040\025\001\002\000\020\017\022\031\021\034\023"
        + "\035\026\036\027\037\030\040\025\001\002\000\020\017"
        + "\022\031\021\034\023\035\026\036\027\037\030\040\025"
        + "\001\002\000\020\017\022\031\021\034\023\035\026\036"
        + "\027\037\030\040\025\001\002\000\020\017\022\031\021"
        + "\034\023\035\026\036\027\037\030\040\025\001\002\000"
        + "\034\016\uffec\017\uffec\020\041\021\031\022\uffec\023\uffec"
        + "\024\uffec\025\uffec\026\uffec\030\uffec\032\uffec\033\uffec\042"
        + "\uffec\001\002\000\034\016\uffea\017\uffea\020\uffea\021\uffea"
        + "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030\uffea\032"
        + "\uffea\033\uffea\042\uffea\001\002\000\034\016\042\017\032"
        + "\020\041\021\031\022\036\023\033\024\uffe5\025\uffe5\026"
        + "\uffe5\030\uffe5\032\uffe5\033\uffe5\042\uffe5\001\002\000\034"
        + "\016\042\017\032\020\041\021\031\022\036\023\033\024"
        + "\uffe6\025\uffe6\026\uffe6\030\uffe6\032\uffe6\033\uffe6\042\uffe6"
        + "\001\002\000\034\016\042\017\032\020\041\021\031\022"
        + "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\032\uffe7"
        + "\033\uffe7\042\uffe7\001\002\000\034\016\042\017\032\020"
        + "\041\021\031\022\036\023\033\024\037\025\uffe4\026\uffe4"
        + "\030\uffe4\032\uffe4\033\uffe4\042\040\001\002\000\034\016"
        + "\042\017\032\020\041\021\031\022\036\023\033\024\037"
        + "\025\uffe3\026\uffe3\030\uffe3\032\uffe3\033\uffe3\042\040\001"
        + "\002\000\034\016\042\017\032\020\041\021\031\022\uffe8"
        + "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\032\uffe8\033"
        + "\uffe8\042\uffe8\001\002\000\034\016\uffeb\017\uffeb\020\041"
        + "\021\031\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030"
        + "\uffeb\032\uffeb\033\uffeb\042\uffeb\001\002\000\034\016\uffe9"
        + "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025"
        + "\uffe9\026\uffe9\030\uffe9\032\uffe9\033\uffe9\042\uffe9\001\002"
        + "\000\034\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023"
        + "\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\032\uffe0\033\uffe0"
        + "\042\uffe0\001\002\000\034\016\uffe1\017\uffe1\020\uffe1\021"
        + "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1"
        + "\032\uffe1\033\uffe1\042\uffe1\001\002\000\030\016\042\017"
        + "\032\020\041\021\031\022\036\023\033\024\037\025\034"
        + "\026\035\032\060\042\040\001\002\000\034\016\uffe2\017"
        + "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2"
        + "\026\uffe2\030\uffe2\032\uffe2\033\uffe2\042\uffe2\001\002\000"
        + "\006\030\ufff2\033\ufff2\001\002\000\004\002\ufffe\001\002"
        + "\000\004\040\017\001\002\000\014\004\ufffd\005\ufffd\006"
        + "\ufffd\007\ufffd\010\ufffd\001\002\000\006\030\ufff3\033\ufff3"
        + "\001\002\000\004\002\001\001\002\000\004\032\070\001"
        + "\002\000\004\044\071\001\002\000\026\004\014\005\004"
        + "\006\015\007\006\011\102\012\100\013\076\014\074\015"
        + "\104\040\017\001\002\000\030\004\ufffa\005\ufffa\006\ufffa"
        + "\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\040"
        + "\ufffa\043\ufffa\001\002\000\004\031\150\001\002\000\004"
        + "\031\uffce\001\002\000\030\004\ufff9\005\ufff9\006\ufff9\007"
        + "\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\040\ufff9"
        + "\043\ufff9\001\002\000\004\031\uffcf\001\002\000\032\004"
        + "\uffda\005\uffda\006\uffda\007\uffda\011\uffda\012\uffda\013\uffda"
        + "\014\uffda\015\uffda\040\uffda\041\133\043\uffda\001\002\000"
        + "\004\031\uffd3\001\002\000\030\004\ufff7\005\ufff7\006\ufff7"
        + "\007\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\040"
        + "\ufff7\043\ufff7\001\002\000\004\031\114\001\002\000\030"
        + "\004\014\005\004\006\015\007\006\011\102\012\100\013"
        + "\076\014\074\015\104\040\017\043\ufffc\001\002\000\004"
        + "\030\112\001\002\000\004\030\111\001\002\000\006\030"
        + "\110\033\063\001\002\000\030\004\ufff8\005\ufff8\006\ufff8"
        + "\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\040"
        + "\ufff8\043\ufff8\001\002\000\030\004\ufff6\005\ufff6\006\ufff6"
        + "\007\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\040"
        + "\ufff6\043\ufff6\001\002\000\030\004\ufff5\005\ufff5\006\ufff5"
        + "\007\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\040"
        + "\ufff5\043\ufff5\001\002\000\030\004\ufff4\005\ufff4\006\ufff4"
        + "\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\040"
        + "\ufff4\043\ufff4\001\002\000\030\004\ufffb\005\ufffb\006\ufffb"
        + "\007\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\040"
        + "\ufffb\043\ufffb\001\002\000\020\017\022\031\021\034\023"
        + "\035\026\036\027\037\030\040\025\001\002\000\030\016"
        + "\042\017\032\020\041\021\031\022\036\023\033\024\037"
        + "\025\034\026\035\032\116\042\040\001\002\000\004\044"
        + "\117\001\002\000\026\004\uffd5\005\uffd5\006\uffd5\007\uffd5"
        + "\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\040\uffd5\001"
        + "\002\000\026\004\014\005\004\006\015\007\006\011\102"
        + "\012\100\013\076\014\074\015\104\040\017\001\002\000"
        + "\030\004\014\005\004\006\015\007\006\011\102\012\100"
        + "\013\076\014\074\015\104\040\017\043\122\001\002\000"
        + "\032\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\012\uffd4"
        + "\013\uffd4\014\uffd4\015\uffd4\040\uffd4\041\uffd4\043\uffd4\001"
        + "\002\000\004\031\124\001\002\000\020\017\022\031\021"
        + "\034\023\035\026\036\027\037\030\040\025\001\002\000"
        + "\030\016\042\017\032\020\041\021\031\022\036\023\033"
        + "\024\037\025\034\026\035\032\126\042\040\001\002\000"
        + "\004\044\127\001\002\000\026\004\uffd2\005\uffd2\006\uffd2"
        + "\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\040"
        + "\uffd2\001\002\000\026\004\014\005\004\006\015\007\006"
        + "\011\102\012\100\013\076\014\074\015\104\040\017\001"
        + "\002\000\030\004\014\005\004\006\015\007\006\011\102"
        + "\012\100\013\076\014\074\015\104\040\017\043\132\001"
        + "\002\000\030\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1"
        + "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\040\uffd1\043\uffd1\001"
        + "\002\000\006\011\135\044\134\001\002\000\026\004\uffd9"
        + "\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9\014"
        + "\uffd9\015\uffd9\040\uffd9\001\002\000\004\031\136\001\002"
        + "\000\020\017\022\031\021\034\023\035\026\036\027\037"
        + "\030\040\025\001\002\000\030\016\042\017\032\020\041"
        + "\021\031\022\036\023\033\024\037\025\034\026\035\032"
        + "\140\042\040\001\002\000\004\044\141\001\002\000\026"
        + "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013"
        + "\uffd7\014\uffd7\015\uffd7\040\uffd7\001\002\000\026\004\014"
        + "\005\004\006\015\007\006\011\102\012\100\013\076\014"
        + "\074\015\104\040\017\001\002\000\030\004\014\005\004"
        + "\006\015\007\006\011\102\012\100\013\076\014\074\015"
        + "\104\040\017\043\144\001\002\000\032\004\uffd6\005\uffd6"
        + "\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015"
        + "\uffd6\040\uffd6\041\uffd6\043\uffd6\001\002\000\026\004\014"
        + "\005\004\006\015\007\006\011\102\012\100\013\076\014"
        + "\074\015\104\040\017\001\002\000\030\004\014\005\004"
        + "\006\015\007\006\011\102\012\100\013\076\014\074\015"
        + "\104\040\017\043\147\001\002\000\030\004\uffd8\005\uffd8"
        + "\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015"
        + "\uffd8\040\uffd8\043\uffd8\001\002\000\020\017\022\031\021"
        + "\034\023\035\026\036\027\037\030\040\025\001\002\000"
        + "\030\016\042\017\032\020\041\021\031\022\036\023\033"
        + "\024\037\025\034\026\035\032\152\042\040\001\002\000"
        + "\004\030\153\001\002\000\030\004\uffd0\005\uffd0\006\uffd0"
        + "\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\040"
        + "\uffd0\043\uffd0\001\002\000\006\030\uffef\033\uffef\001\002"
        + "\000\004\002\uffff\001\002\000\006\030\ufff0\033\ufff0\001"
        + "\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\154\000\014\002\012\003\007\004\011\007\004\017"
        + "\010\001\001\000\004\016\155\001\001\000\012\002\154"
        + "\004\011\007\004\017\010\001\001\000\004\016\153\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\016\060\001"
        + "\001\000\004\016\015\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\013\023\001\001\000\004\013\056\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\013\053\001\001\000\004\013\052"
        + "\001\001\000\004\013\051\001\001\000\004\013\050\001"
        + "\001\000\004\013\047\001\001\000\004\013\046\001\001"
        + "\000\004\013\045\001\001\000\004\013\044\001\001\000"
        + "\004\013\043\001\001\000\004\013\042\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\016"
        + "\064\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\024\005"
        + "\102\006\071\010\100\011\106\012\072\014\076\015\074"
        + "\016\104\017\105\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\023\122\001\001\000\002\001"
        + "\001\000\002\001\001\000\022\006\112\010\100\011\106"
        + "\012\072\014\076\015\074\016\104\017\105\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\013\114\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\022\117\001\001\000"
        + "\024\005\120\006\071\010\100\011\106\012\072\014\076"
        + "\015\074\016\104\017\105\001\001\000\022\006\112\010"
        + "\100\011\106\012\072\014\076\015\074\016\104\017\105"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\013"
        + "\124\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\024\127\001\001\000\024\005\130\006\071\010\100\011"
        + "\106\012\072\014\076\015\074\016\104\017\105\001\001"
        + "\000\022\006\112\010\100\011\106\012\072\014\076\015"
        + "\074\016\104\017\105\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\020\144\001\001\000\002\001\001\000"
        + "\004\013\136\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\021\141\001\001\000\024\005\142\006\071\010"
        + "\100\011\106\012\072\014\076\015\074\016\104\017\105"
        + "\001\001\000\022\006\112\010\100\011\106\012\072\014"
        + "\076\015\074\016\104\017\105\001\001\000\002\001\001"
        + "\000\024\005\145\006\071\010\100\011\106\012\072\014"
        + "\076\015\074\016\104\017\105\001\001\000\022\006\112"
        + "\010\100\011\106\012\072\014\076\015\074\016\104\017"
        + "\105\001\001\000\002\001\001\000\004\013\150\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$sintactico$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$sintactico$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    private semanticManager semanticM;
    languageConstants lanC = new languageConstants();
    private codeEditor codeE;

    public sintactico(Lexer lex, semanticManager semanticM) {
        super(lex);
        this.semanticM = semanticM;
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        String message = "Estructura invalida en Columna: " + cur_token.right
                + " Fila: " + cur_token.left + " , token: " + cur_token.value;
        System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<");
        System.out.println(message);
        semanticM.errorAndPlace(lanC.AN_SINTACTICO, message);
        System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$sintactico$actions {

        private final sintactico parser;

        /**
         * Constructor
         */
        CUP$sintactico$actions(sintactico parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
                int CUP$sintactico$act_num,
                java_cup.runtime.lr_parser CUP$sintactico$parser,
                java.util.Stack CUP$sintactico$stack,
                int CUP$sintactico$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$sintactico$result;

            /* select the action based on the action number */
            switch (CUP$sintactico$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= INICIO_CODIGO EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String start_val = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    RESULT = start_val;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$sintactico$parser.done_parsing();
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // INICIO_CODIGO ::= CODIGO
                {
                    String RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_CODIGO", 1, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // CODIGO ::= CUERPO_CODIGO CODIGO
                {
                    String RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // CODIGO ::= MAIN_IDE CorCerrado
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // CUERPO_CODIGO ::= DECLARACION_VAR EndCom
                {
                    Boolean RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CODIGO", 5, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // MAIN_IDE ::= NamMain ParAbierto ParCerrado CorAbierto MAIN_BODY
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_IDE", 2, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // MAIN_BODY ::= MAIN_BODY MAIN_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY", 3, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // MAIN_BODY ::= MAIN_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY", 3, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // MAIN_FUNCION ::= IF_ELSE_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    cicleFlag e = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // MAIN_FUNCION ::= PRINT_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // MAIN_FUNCION ::= WHILE_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // MAIN_FUNCION ::= DECLARACION_VAR EndCom
                {
                    Boolean RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // MAIN_FUNCION ::= ID_VAR EndCom
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    tempFinalVar e1 = (tempFinalVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.modifyValue(e1, e2left);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // MAIN_FUNCION ::= BreakCom EndCom
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    semanticM.functions.breakFound(eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // DECLARACION_VAR ::= DECLARACION_VAR Coma ID_VAR
                {
                    Integer RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempFinalVar e2 = (tempFinalVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(e1, e2, e3left, e3right);
                    RESULT = e1;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // DECLARACION_VAR ::= NamInt ID_VAR
                {
                    Integer RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempFinalVar e1 = (tempFinalVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(lanC.INTEGER, e1, e3left, e3right);
                    RESULT = lanC.INTEGER;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // DECLARACION_VAR ::= NamBoolean ID_VAR
                {
                    Integer RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempFinalVar e1 = (tempFinalVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(lanC.BOOLEAN, e1, e3left, e3right);
                    RESULT = lanC.BOOLEAN;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // DECLARACION_VAR ::= NamFloat ID_VAR
                {
                    Integer RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempFinalVar e1 = (tempFinalVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(lanC.FLOAT, e1, e3left, e3right);
                    RESULT = lanC.FLOAT;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // DECLARACION_VAR ::= NamString ID_VAR
                {
                    Integer RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempFinalVar e1 = (tempFinalVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(lanC.STRING, e1, e3left, e3right);
                    RESULT = lanC.STRING;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // ID_VAR ::= Identificador
                {
                    tempFinalVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.varToSave(e, new tempVar(lanC.NO_TYPE_AUX, eleft, eright));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ID_VAR", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // ID_VAR ::= Identificador Asignacion OPERACION
                {
                    tempFinalVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.varToSave(e1, e2);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ID_VAR", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // OPERACION ::= OPERACION Mas OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.MAS, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // OPERACION ::= OPERACION Menos OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.MENOS, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // OPERACION ::= OPERACION Por OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.POR, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // OPERACION ::= OPERACION Div OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.DIV, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // OPERACION ::= OPERACION Menor OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.MENOR_Q, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // OPERACION ::= OPERACION Mayor OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.MAYOR_Q, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // OPERACION ::= OPERACION Igual OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.IGUAL, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // OPERACION ::= OPERACION Diferente OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.DIF, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // OPERACION ::= OPERACION Or OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.OR, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // OPERACION ::= OPERACION And OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.AND, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // OPERACION ::= ParAbierto OPERACION ParCerrado
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    tempVar e = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    RESULT = e;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // OPERACION ::= Menos Entero
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new tempVar(-Integer.parseInt(e), lanC.INTEGER, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // OPERACION ::= Menos Decimal
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new tempVar(-Float.parseFloat(e), lanC.FLOAT, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // OPERACION ::= Entero
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new tempVar(Integer.parseInt(e), lanC.INTEGER, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // OPERACION ::= Decimal
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new tempVar(Float.parseFloat(e), lanC.FLOAT, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // OPERACION ::= Booleano
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new tempVar(Boolean.valueOf(e), lanC.BOOLEAN, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // OPERACION ::= Cadena
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new tempVar(lanC.clearString(e), lanC.STRING, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // OPERACION ::= Identificador
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.getTempVarFromList(e, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // IF_ELSE_FUNCION ::= IF_ELSE
                {
                    cicleFlag RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    cicleFlag e1 = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.setJumpFlag(e1);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE_FUNCION", 11, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // NT$0 ::=
                {
                    cicleFlag RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    cicleFlag e3 = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.elseCycle(e1left, e1right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$0", 14, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // IF_ELSE_FUNCION ::= IF_ELSE NamElse CorAbierto NT$0 MAIN_BODY CorCerrado
                {
                    cicleFlag RESULT = null;
                    // propagate RESULT from NT$0
                    RESULT = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).right;
                    cicleFlag e3 = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.closeElseCycle(e2left, e2right, e3);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE_FUNCION", 11, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // NT$1 ::=
                {
                    cicleFlag RESULT = null;
                    int e4left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 6)).left;
                    int e4right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 6)).right;
                    cicleFlag e4 = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 6)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.functions.ifCycleInit(e1, e1left, e1right, e2left, e2right, e4);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$1", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // IF_ELSE ::= IF_ELSE NamElse NamIf ParAbierto OPERACION ParCerrado CorAbierto NT$1 MAIN_BODY CorCerrado
                {
                    cicleFlag RESULT = null;
                    // propagate RESULT from NT$1
                    RESULT = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e4left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 9)).left;
                    int e4right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 9)).right;
                    cicleFlag e4 = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 9)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.closeIfCycle(e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 9)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // NT$2 ::=
                {
                    cicleFlag RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.functions.ifCycleInit(e1, e1left, e1right, e2left, e2right, null);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$2", 16, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // IF_ELSE ::= NamIf ParAbierto OPERACION ParCerrado CorAbierto NT$2 MAIN_BODY CorCerrado
                {
                    cicleFlag RESULT = null;
                    // propagate RESULT from NT$2
                    RESULT = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.closeIfCycle(e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // NT$3 ::=
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.startWhileCycle(e1left, e1right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$3", 17, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // NT$4 ::=
                {
                    Boolean RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.whileCycleInit(e2, e2left, e2right, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$4", 18, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // WHILE_FUNCION ::= NamWhile NT$3 ParAbierto OPERACION ParCerrado CorAbierto NT$4 MAIN_BODY CorCerrado
                {
                    Boolean RESULT = null;
                    // propagate RESULT from NT$4
                    RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 8)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 8)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 8)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e4left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e4right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e4 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.closeWhileCycle(e4left, e4right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION", 6, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 8)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // PRINT_FUNCION ::= PRINT_OPTION ParAbierto OPERACION ParCerrado EndCom
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    semanticM.functions.correctStringPrint(e2, e1left, e1right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_FUNCION", 7, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // PRINT_OPTION ::= PrintN
                {
                    Boolean RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_OPTION", 8, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // PRINT_OPTION ::= PrintS
                {
                    Boolean RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_OPTION", 8, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$sintactico$act_num + "found in internal parse table");

            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$sintactico$do_action(
                int CUP$sintactico$act_num,
                java_cup.runtime.lr_parser CUP$sintactico$parser,
                java.util.Stack CUP$sintactico$stack,
                int CUP$sintactico$top)
                throws java.lang.Exception {
            return CUP$sintactico$do_action_part00000000(
                    CUP$sintactico$act_num,
                    CUP$sintactico$parser,
                    CUP$sintactico$stack,
                    CUP$sintactico$top);
        }
    }

}
