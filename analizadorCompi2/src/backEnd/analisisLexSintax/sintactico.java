//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package backEnd.analisisLexSintax;

import java_cup.runtime.*;
import backEnd.semantic.*;
import backEnd.Objects.*;
import backEnd.Objects.funtion.*;
import backEnd.langConstants.languageConstants;
import GUI.codeEditor;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public sintactico() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public sintactico(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\074\000\002\002\004\000\002\003\003\000\002\002"
        + "\004\000\002\002\004\000\002\007\004\000\002\004\007"
        + "\000\002\005\004\000\002\005\003\000\002\006\003\000"
        + "\002\006\003\000\002\006\003\000\002\006\003\000\002"
        + "\006\004\000\002\006\004\000\002\006\004\000\002\021"
        + "\005\000\002\021\004\000\002\021\004\000\002\021\004"
        + "\000\002\021\004\000\002\020\003\000\002\020\005\000"
        + "\002\020\004\000\002\020\006\000\002\015\006\000\002"
        + "\015\005\000\002\014\005\000\002\014\005\000\002\014"
        + "\005\000\002\014\005\000\002\014\005\000\002\014\005"
        + "\000\002\014\005\000\002\014\005\000\002\014\005\000"
        + "\002\014\005\000\002\014\005\000\002\014\004\000\002"
        + "\014\004\000\002\014\003\000\002\014\003\000\002\014"
        + "\003\000\002\014\003\000\002\014\003\000\002\017\003"
        + "\000\002\023\002\000\002\017\010\000\002\024\002\000"
        + "\002\016\014\000\002\025\002\000\002\016\012\000\002"
        + "\026\002\000\002\027\002\000\002\010\013\000\002\011"
        + "\007\000\002\012\003\000\002\012\003\000\002\013\007"
        + "\000\002\022\003\000\002\022\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\175\000\014\004\014\005\004\006\015\007\006\010"
        + "\007\001\002\000\004\040\017\001\002\000\014\004\014"
        + "\005\004\006\015\007\006\010\007\001\002\000\004\040"
        + "\017\001\002\000\004\031\100\001\002\000\004\002\077"
        + "\001\002\000\006\030\074\033\075\001\002\000\004\043"
        + "\073\001\002\000\004\002\000\001\002\000\004\040\017"
        + "\001\002\000\004\040\017\001\002\000\006\030\ufff0\033"
        + "\ufff0\001\002\000\012\027\022\030\uffed\033\uffed\045\021"
        + "\001\002\000\012\027\066\030\uffeb\033\uffeb\045\065\001"
        + "\002\000\020\017\024\031\023\034\025\035\030\036\031"
        + "\037\032\040\027\001\002\000\020\017\024\031\023\034"
        + "\025\035\030\036\031\037\032\040\027\001\002\000\020"
        + "\017\024\031\023\034\025\035\030\036\031\037\032\040"
        + "\027\001\002\000\006\036\057\037\060\001\002\000\036"
        + "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024"
        + "\uffd8\025\uffd8\026\uffd8\030\uffd8\032\uffd8\033\uffd8\042\uffd8"
        + "\046\uffd8\001\002\000\032\016\044\017\034\020\043\021"
        + "\033\022\040\023\035\024\041\025\036\026\037\030\uffec"
        + "\033\uffec\042\042\001\002\000\036\016\uffd6\017\uffd6\020"
        + "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6"
        + "\030\uffd6\032\uffd6\033\uffd6\042\uffd6\046\uffd6\001\002\000"
        + "\036\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7"
        + "\024\uffd7\025\uffd7\026\uffd7\030\uffd7\032\uffd7\033\uffd7\042"
        + "\uffd7\046\uffd7\001\002\000\036\016\uffda\017\uffda\020\uffda"
        + "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\030"
        + "\uffda\032\uffda\033\uffda\042\uffda\046\uffda\001\002\000\036"
        + "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024"
        + "\uffd9\025\uffd9\026\uffd9\030\uffd9\032\uffd9\033\uffd9\042\uffd9"
        + "\046\uffd9\001\002\000\020\017\024\031\023\034\025\035"
        + "\030\036\031\037\032\040\027\001\002\000\020\017\024"
        + "\031\023\034\025\035\030\036\031\037\032\040\027\001"
        + "\002\000\020\017\024\031\023\034\025\035\030\036\031"
        + "\037\032\040\027\001\002\000\020\017\024\031\023\034"
        + "\025\035\030\036\031\037\032\040\027\001\002\000\020"
        + "\017\024\031\023\034\025\035\030\036\031\037\032\040"
        + "\027\001\002\000\020\017\024\031\023\034\025\035\030"
        + "\036\031\037\032\040\027\001\002\000\020\017\024\031"
        + "\023\034\025\035\030\036\031\037\032\040\027\001\002"
        + "\000\020\017\024\031\023\034\025\035\030\036\031\037"
        + "\032\040\027\001\002\000\020\017\024\031\023\034\025"
        + "\035\030\036\031\037\032\040\027\001\002\000\020\017"
        + "\024\031\023\034\025\035\030\036\031\037\032\040\027"
        + "\001\002\000\036\016\uffe7\017\uffe7\020\043\021\033\022"
        + "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\032\uffe7"
        + "\033\uffe7\042\uffe7\046\uffe7\001\002\000\036\016\uffe5\017"
        + "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5"
        + "\026\uffe5\030\uffe5\032\uffe5\033\uffe5\042\uffe5\046\uffe5\001"
        + "\002\000\036\016\044\017\034\020\043\021\033\022\040"
        + "\023\035\024\uffe0\025\uffe0\026\uffe0\030\uffe0\032\uffe0\033"
        + "\uffe0\042\uffe0\046\uffe0\001\002\000\036\016\044\017\034"
        + "\020\043\021\033\022\040\023\035\024\uffe1\025\uffe1\026"
        + "\uffe1\030\uffe1\032\uffe1\033\uffe1\042\uffe1\046\uffe1\001\002"
        + "\000\036\016\044\017\034\020\043\021\033\022\uffe2\023"
        + "\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\032\uffe2\033\uffe2"
        + "\042\uffe2\046\uffe2\001\002\000\036\016\044\017\034\020"
        + "\043\021\033\022\040\023\035\024\041\025\uffdf\026\uffdf"
        + "\030\uffdf\032\uffdf\033\uffdf\042\042\046\uffdf\001\002\000"
        + "\036\016\044\017\034\020\043\021\033\022\040\023\035"
        + "\024\041\025\uffde\026\uffde\030\uffde\032\uffde\033\uffde\042"
        + "\042\046\uffde\001\002\000\036\016\044\017\034\020\043"
        + "\021\033\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030"
        + "\uffe3\032\uffe3\033\uffe3\042\uffe3\046\uffe3\001\002\000\036"
        + "\016\uffe6\017\uffe6\020\043\021\033\022\uffe6\023\uffe6\024"
        + "\uffe6\025\uffe6\026\uffe6\030\uffe6\032\uffe6\033\uffe6\042\uffe6"
        + "\046\uffe6\001\002\000\036\016\uffe4\017\uffe4\020\uffe4\021"
        + "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4"
        + "\032\uffe4\033\uffe4\042\uffe4\046\uffe4\001\002\000\036\016"
        + "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc"
        + "\025\uffdc\026\uffdc\030\uffdc\032\uffdc\033\uffdc\042\uffdc\046"
        + "\uffdc\001\002\000\036\016\uffdb\017\uffdb\020\uffdb\021\uffdb"
        + "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\032"
        + "\uffdb\033\uffdb\042\uffdb\046\uffdb\001\002\000\030\016\044"
        + "\017\034\020\043\021\033\022\040\023\035\024\041\025"
        + "\036\026\037\032\062\042\042\001\002\000\036\016\uffdd"
        + "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025"
        + "\uffdd\026\uffdd\030\uffdd\032\uffdd\033\uffdd\042\uffdd\046\uffdd"
        + "\001\002\000\030\016\044\017\034\020\043\021\033\022"
        + "\040\023\035\024\041\025\036\026\037\042\042\046\064"
        + "\001\002\000\012\027\uffe8\030\uffe8\033\uffe8\045\uffe8\001"
        + "\002\000\020\017\024\031\023\034\025\035\030\036\031"
        + "\037\032\040\027\001\002\000\020\017\024\031\023\034"
        + "\025\035\030\036\031\037\032\040\027\001\002\000\032"
        + "\016\044\017\034\020\043\021\033\022\040\023\035\024"
        + "\041\025\036\026\037\030\uffea\033\uffea\042\042\001\002"
        + "\000\030\016\044\017\034\020\043\021\033\022\040\023"
        + "\035\024\041\025\036\026\037\042\042\046\071\001\002"
        + "\000\012\027\uffe9\030\uffe9\033\uffe9\045\uffe9\001\002\000"
        + "\006\030\ufff1\033\ufff1\001\002\000\004\002\ufffe\001\002"
        + "\000\014\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\001"
        + "\002\000\004\040\017\001\002\000\006\030\ufff2\033\ufff2"
        + "\001\002\000\004\002\001\001\002\000\004\032\101\001"
        + "\002\000\004\044\102\001\002\000\032\004\014\005\004"
        + "\006\015\007\006\011\115\012\113\013\110\014\105\015"
        + "\121\040\017\047\106\050\112\001\002\000\034\004\ufffa"
        + "\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014"
        + "\ufffa\015\ufffa\040\ufffa\043\ufffa\047\ufffa\050\ufffa\001\002"
        + "\000\004\031\171\001\002\000\004\031\uffc9\001\002\000"
        + "\004\031\uffc6\001\002\000\034\004\ufff9\005\ufff9\006\ufff9"
        + "\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\040"
        + "\ufff9\043\ufff9\047\ufff9\050\ufff9\001\002\000\004\031\uffca"
        + "\001\002\000\036\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011"
        + "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\040\uffd5\041\154"
        + "\043\uffd5\047\uffd5\050\uffd5\001\002\000\004\031\uffc7\001"
        + "\002\000\004\031\uffce\001\002\000\034\004\ufff7\005\ufff7"
        + "\006\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015"
        + "\ufff7\040\ufff7\043\ufff7\047\ufff7\050\ufff7\001\002\000\004"
        + "\031\135\001\002\000\034\004\014\005\004\006\015\007"
        + "\006\011\115\012\113\013\110\014\105\015\121\040\017"
        + "\043\ufffc\047\106\050\112\001\002\000\034\004\ufff6\005"
        + "\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6"
        + "\015\ufff6\040\ufff6\043\ufff6\047\ufff6\050\ufff6\001\002\000"
        + "\004\031\130\001\002\000\004\030\127\001\002\000\004"
        + "\030\126\001\002\000\006\030\125\033\075\001\002\000"
        + "\034\004\ufff8\005\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8"
        + "\013\ufff8\014\ufff8\015\ufff8\040\ufff8\043\ufff8\047\ufff8\050"
        + "\ufff8\001\002\000\034\004\ufff5\005\ufff5\006\ufff5\007\ufff5"
        + "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\040\ufff5\043"
        + "\ufff5\047\ufff5\050\ufff5\001\002\000\034\004\ufff4\005\ufff4"
        + "\006\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015"
        + "\ufff4\040\ufff4\043\ufff4\047\ufff4\050\ufff4\001\002\000\034"
        + "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013"
        + "\ufff3\014\ufff3\015\ufff3\040\ufff3\043\ufff3\047\ufff3\050\ufff3"
        + "\001\002\000\004\040\131\001\002\000\004\032\132\001"
        + "\002\000\004\030\133\001\002\000\034\004\uffc8\005\uffc8"
        + "\006\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015"
        + "\uffc8\040\uffc8\043\uffc8\047\uffc8\050\uffc8\001\002\000\034"
        + "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb\012\ufffb\013"
        + "\ufffb\014\ufffb\015\ufffb\040\ufffb\043\ufffb\047\ufffb\050\ufffb"
        + "\001\002\000\020\017\024\031\023\034\025\035\030\036"
        + "\031\037\032\040\027\001\002\000\030\016\044\017\034"
        + "\020\043\021\033\022\040\023\035\024\041\025\036\026"
        + "\037\032\137\042\042\001\002\000\004\044\140\001\002"
        + "\000\032\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012"
        + "\uffd0\013\uffd0\014\uffd0\015\uffd0\040\uffd0\047\uffd0\050\uffd0"
        + "\001\002\000\032\004\014\005\004\006\015\007\006\011"
        + "\115\012\113\013\110\014\105\015\121\040\017\047\106"
        + "\050\112\001\002\000\034\004\014\005\004\006\015\007"
        + "\006\011\115\012\113\013\110\014\105\015\121\040\017"
        + "\043\143\047\106\050\112\001\002\000\036\004\uffcf\005"
        + "\uffcf\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf"
        + "\015\uffcf\040\uffcf\041\uffcf\043\uffcf\047\uffcf\050\uffcf\001"
        + "\002\000\004\031\145\001\002\000\020\017\024\031\023"
        + "\034\025\035\030\036\031\037\032\040\027\001\002\000"
        + "\030\016\044\017\034\020\043\021\033\022\040\023\035"
        + "\024\041\025\036\026\037\032\147\042\042\001\002\000"
        + "\004\044\150\001\002\000\032\004\uffcd\005\uffcd\006\uffcd"
        + "\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\040"
        + "\uffcd\047\uffcd\050\uffcd\001\002\000\032\004\014\005\004"
        + "\006\015\007\006\011\115\012\113\013\110\014\105\015"
        + "\121\040\017\047\106\050\112\001\002\000\034\004\014"
        + "\005\004\006\015\007\006\011\115\012\113\013\110\014"
        + "\105\015\121\040\017\043\153\047\106\050\112\001\002"
        + "\000\034\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\012"
        + "\uffcc\013\uffcc\014\uffcc\015\uffcc\040\uffcc\043\uffcc\047\uffcc"
        + "\050\uffcc\001\002\000\006\011\155\044\156\001\002\000"
        + "\004\031\162\001\002\000\032\004\uffd4\005\uffd4\006\uffd4"
        + "\007\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\040"
        + "\uffd4\047\uffd4\050\uffd4\001\002\000\032\004\014\005\004"
        + "\006\015\007\006\011\115\012\113\013\110\014\105\015"
        + "\121\040\017\047\106\050\112\001\002\000\034\004\014"
        + "\005\004\006\015\007\006\011\115\012\113\013\110\014"
        + "\105\015\121\040\017\043\161\047\106\050\112\001\002"
        + "\000\034\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012"
        + "\uffd3\013\uffd3\014\uffd3\015\uffd3\040\uffd3\043\uffd3\047\uffd3"
        + "\050\uffd3\001\002\000\020\017\024\031\023\034\025\035"
        + "\030\036\031\037\032\040\027\001\002\000\030\016\044"
        + "\017\034\020\043\021\033\022\040\023\035\024\041\025"
        + "\036\026\037\032\164\042\042\001\002\000\004\044\165"
        + "\001\002\000\032\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011"
        + "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\040\uffd2\047\uffd2"
        + "\050\uffd2\001\002\000\032\004\014\005\004\006\015\007"
        + "\006\011\115\012\113\013\110\014\105\015\121\040\017"
        + "\047\106\050\112\001\002\000\034\004\014\005\004\006"
        + "\015\007\006\011\115\012\113\013\110\014\105\015\121"
        + "\040\017\043\170\047\106\050\112\001\002\000\036\004"
        + "\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1"
        + "\014\uffd1\015\uffd1\040\uffd1\041\uffd1\043\uffd1\047\uffd1\050"
        + "\uffd1\001\002\000\020\017\024\031\023\034\025\035\030"
        + "\036\031\037\032\040\027\001\002\000\030\016\044\017"
        + "\034\020\043\021\033\022\040\023\035\024\041\025\036"
        + "\026\037\032\173\042\042\001\002\000\004\030\174\001"
        + "\002\000\034\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb"
        + "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\040\uffcb\043\uffcb\047"
        + "\uffcb\050\uffcb\001\002\000\006\030\uffee\033\uffee\001\002"
        + "\000\004\002\uffff\001\002\000\006\030\uffef\033\uffef\001"
        + "\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\175\000\014\002\012\003\007\004\011\007\004\021"
        + "\010\001\001\000\004\020\176\001\001\000\012\002\175"
        + "\004\011\007\004\021\010\001\001\000\004\020\174\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\020\071\001"
        + "\001\000\004\020\015\001\001\000\002\001\001\000\004"
        + "\015\017\001\001\000\002\001\001\000\004\014\062\001"
        + "\001\000\004\014\025\001\001\000\004\014\060\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\014\055\001\001\000\004\014\054\001"
        + "\001\000\004\014\053\001\001\000\004\014\052\001\001"
        + "\000\004\014\051\001\001\000\004\014\050\001\001\000"
        + "\004\014\047\001\001\000\004\014\046\001\001\000\004"
        + "\014\045\001\001\000\004\014\044\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\014\067"
        + "\001\001\000\004\014\066\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\020\075\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\030\005\115\006\102\010\113\011\123\012"
        + "\103\013\116\016\110\017\106\020\121\021\122\022\117"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\026\143\001"
        + "\001\000\002\001\001\000\002\001\001\000\026\006\133"
        + "\010\113\011\123\012\103\013\116\016\110\017\106\020"
        + "\121\021\122\022\117\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\014\135\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\025\140\001\001\000\030\005\141\006\102\010\113"
        + "\011\123\012\103\013\116\016\110\017\106\020\121\021"
        + "\122\022\117\001\001\000\026\006\133\010\113\011\123"
        + "\012\103\013\116\016\110\017\106\020\121\021\122\022"
        + "\117\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\014\145\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\027\150\001\001\000\030\005\151\006\102\010\113"
        + "\011\123\012\103\013\116\016\110\017\106\020\121\021"
        + "\122\022\117\001\001\000\026\006\133\010\113\011\123"
        + "\012\103\013\116\016\110\017\106\020\121\021\122\022"
        + "\117\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\023\156\001\001\000\030\005\157\006"
        + "\102\010\113\011\123\012\103\013\116\016\110\017\106"
        + "\020\121\021\122\022\117\001\001\000\026\006\133\010"
        + "\113\011\123\012\103\013\116\016\110\017\106\020\121"
        + "\021\122\022\117\001\001\000\002\001\001\000\004\014"
        + "\162\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\024\165\001\001\000\030\005\166\006\102\010\113\011"
        + "\123\012\103\013\116\016\110\017\106\020\121\021\122"
        + "\022\117\001\001\000\026\006\133\010\113\011\123\012"
        + "\103\013\116\016\110\017\106\020\121\021\122\022\117"
        + "\001\001\000\002\001\001\000\004\014\171\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$sintactico$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$sintactico$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    private semanticManager semanticM;
    languageConstants lanC = new languageConstants();
    private codeEditor codeE;

    public sintactico(Lexer lex, semanticManager semanticM) {
        super(lex);
        this.semanticM = semanticM;
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        String message = "Estructura invalida en Columna: " + cur_token.right
                + " Fila: " + cur_token.left + " , token: " + cur_token.value;
        System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<");
        System.out.println(message);
        semanticM.errorAndPlace(lanC.AN_SINTACTICO, message);
        System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$sintactico$actions {

        private final sintactico parser;

        /**
         * Constructor
         */
        CUP$sintactico$actions(sintactico parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
                int CUP$sintactico$act_num,
                java_cup.runtime.lr_parser CUP$sintactico$parser,
                java.util.Stack CUP$sintactico$stack,
                int CUP$sintactico$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$sintactico$result;

            /* select the action based on the action number */
            switch (CUP$sintactico$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= INICIO_CODIGO EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String start_val = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    RESULT = start_val;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$sintactico$parser.done_parsing();
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // INICIO_CODIGO ::= CODIGO
                {
                    String RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_CODIGO", 1, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // CODIGO ::= CUERPO_CODIGO CODIGO
                {
                    String RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // CODIGO ::= MAIN_IDE CorCerrado
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO", 0, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // CUERPO_CODIGO ::= DECLARACION_VAR EndCom
                {
                    Boolean RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CODIGO", 5, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // MAIN_IDE ::= NamMain ParAbierto ParCerrado CorAbierto MAIN_BODY
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_IDE", 2, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // MAIN_BODY ::= MAIN_BODY MAIN_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY", 3, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // MAIN_BODY ::= MAIN_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_BODY", 3, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // MAIN_FUNCION ::= IF_ELSE_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    cicleFlag e = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // MAIN_FUNCION ::= PRINT_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // MAIN_FUNCION ::= WHILE_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // MAIN_FUNCION ::= SCAN_FUNCION
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    Boolean e = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // MAIN_FUNCION ::= DECLARACION_VAR EndCom
                {
                    Boolean RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // MAIN_FUNCION ::= ID_VAR EndCom
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    tempFinalVar e1 = (tempFinalVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.modifyValue(e1, e2left);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // MAIN_FUNCION ::= BreakCom EndCom
                {
                    Boolean RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    semanticM.functions.breakFound(eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MAIN_FUNCION", 4, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // DECLARACION_VAR ::= DECLARACION_VAR Coma ID_VAR
                {
                    Integer RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempFinalVar e2 = (tempFinalVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(e1, e2, e3left, e3right);
                    RESULT = e1;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // DECLARACION_VAR ::= NamInt ID_VAR
                {
                    Integer RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempFinalVar e1 = (tempFinalVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(lanC.INTEGER, e1, e3left, e3right);
                    RESULT = lanC.INTEGER;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // DECLARACION_VAR ::= NamBoolean ID_VAR
                {
                    Integer RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempFinalVar e1 = (tempFinalVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(lanC.BOOLEAN, e1, e3left, e3right);
                    RESULT = lanC.BOOLEAN;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // DECLARACION_VAR ::= NamFloat ID_VAR
                {
                    Integer RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempFinalVar e1 = (tempFinalVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(lanC.FLOAT, e1, e3left, e3right);
                    RESULT = lanC.FLOAT;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // DECLARACION_VAR ::= NamString ID_VAR
                {
                    Integer RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempFinalVar e1 = (tempFinalVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.addVariableToList(lanC.STRING, e1, e3left, e3right);
                    RESULT = lanC.STRING;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_VAR", 15, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // ID_VAR ::= Identificador
                {
                    tempFinalVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.varToSave(e, new tempVar(lanC.NO_TYPE_AUX, eleft, eright));
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ID_VAR", 14, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // ID_VAR ::= Identificador Asignacion OPERACION
                {
                    tempFinalVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.varToSave(e1, e2);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ID_VAR", 14, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // ID_VAR ::= Identificador ARRAY_DIMENSION
                {
                    tempFinalVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    LinkedList<tempVar> e2 = (LinkedList<tempVar>) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.semArray.varToSave(e1, e2, e1left);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ID_VAR", 14, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // ID_VAR ::= Identificador ARRAY_DIMENSION Asignacion OPERACION
                {
                    tempFinalVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    LinkedList<tempVar> e2 = (LinkedList<tempVar>) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e3 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.semArray.varToSave(e1, e2, e3, e1left);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ID_VAR", 14, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // ARRAY_DIMENSION ::= ARRAY_DIMENSION KeyOpen OPERACION KeyClose
                {
                    LinkedList<tempVar> RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    LinkedList<tempVar> e1 = (LinkedList<tempVar>) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    RESULT = semanticM.operations.semArray.startDimension(e1, e2, e3left);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARRAY_DIMENSION", 11, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // ARRAY_DIMENSION ::= KeyOpen OPERACION KeyClose
                {
                    LinkedList<tempVar> RESULT = null;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    RESULT = semanticM.operations.semArray.startDimension(e1, e2left);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARRAY_DIMENSION", 11, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // OPERACION ::= OPERACION Mas OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.MAS, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // OPERACION ::= OPERACION Menos OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.MENOS, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // OPERACION ::= OPERACION Por OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.POR, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // OPERACION ::= OPERACION Div OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.DIV, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // OPERACION ::= OPERACION Menor OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.MENOR_Q, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // OPERACION ::= OPERACION Mayor OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.MAYOR_Q, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // OPERACION ::= OPERACION Igual OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.IGUAL, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // OPERACION ::= OPERACION Diferente OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.DIF, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // OPERACION ::= OPERACION Or OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.OR, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // OPERACION ::= OPERACION And OPERACION
                {
                    tempVar RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.operations.operation(lanC.AND, e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // OPERACION ::= ParAbierto OPERACION ParCerrado
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).right;
                    tempVar e = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)).value;
                    RESULT = e;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // OPERACION ::= Menos Entero
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new tempVar(-Integer.parseInt(e), lanC.INTEGER, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // OPERACION ::= Menos Decimal
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new tempVar(-Float.parseFloat(e), lanC.FLOAT, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // OPERACION ::= Entero
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new tempVar(Integer.parseInt(e), lanC.INTEGER, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // OPERACION ::= Decimal
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new tempVar(Float.parseFloat(e), lanC.FLOAT, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // OPERACION ::= Booleano
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new tempVar(Boolean.valueOf(e), lanC.BOOLEAN, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // OPERACION ::= Cadena
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = new tempVar(lanC.clearString(e), lanC.STRING, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // OPERACION ::= Identificador
                {
                    tempVar RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.getTempVarFromList(e, eleft, eright);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION", 10, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // IF_ELSE_FUNCION ::= IF_ELSE
                {
                    cicleFlag RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    cicleFlag e1 = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.setJumpFlag(e1);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE_FUNCION", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // NT$0 ::=
                {
                    cicleFlag RESULT = null;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    cicleFlag e3 = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.elseCycle(e1left, e1right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$0", 17, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // IF_ELSE_FUNCION ::= IF_ELSE NamElse CorAbierto NT$0 MAIN_BODY CorCerrado
                {
                    cicleFlag RESULT = null;
                    // propagate RESULT from NT$0
                    RESULT = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).right;
                    cicleFlag e3 = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.closeElseCycle(e2left, e2right, e3);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE_FUNCION", 13, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // NT$1 ::=
                {
                    cicleFlag RESULT = null;
                    int e4left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 6)).left;
                    int e4right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 6)).right;
                    cicleFlag e4 = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 6)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.functions.ifCycleInit(e1, e1left, e1right, e2left, e2right, e4);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$1", 18, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // IF_ELSE ::= IF_ELSE NamElse NamIf ParAbierto OPERACION ParCerrado CorAbierto NT$1 MAIN_BODY CorCerrado
                {
                    cicleFlag RESULT = null;
                    // propagate RESULT from NT$1
                    RESULT = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e4left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 9)).left;
                    int e4right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 9)).right;
                    cicleFlag e4 = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 9)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.closeIfCycle(e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 9)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // NT$2 ::=
                {
                    cicleFlag RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    RESULT = semanticM.functions.ifCycleInit(e1, e1left, e1right, e2left, e2right, null);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$2", 19, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // IF_ELSE ::= NamIf ParAbierto OPERACION ParCerrado CorAbierto NT$2 MAIN_BODY CorCerrado
                {
                    cicleFlag RESULT = null;
                    // propagate RESULT from NT$2
                    RESULT = (cicleFlag) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).right;
                    tempVar e1 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.closeIfCycle(e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("IF_ELSE", 12, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // NT$3 ::=
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.startWhileCycle(e1left, e1right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$3", 20, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // NT$4 ::=
                {
                    Boolean RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.whileCycleInit(e2, e2left, e2right, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$4", 21, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // WHILE_FUNCION ::= NamWhile NT$3 ParAbierto OPERACION ParCerrado CorAbierto NT$4 MAIN_BODY CorCerrado
                {
                    Boolean RESULT = null;
                    // propagate RESULT from NT$4
                    RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 8)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 8)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 8)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 5)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e4left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).left;
                    int e4right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).right;
                    String e4 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
                    semanticM.functions.closeWhileCycle(e4left, e4right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("WHILE_FUNCION", 6, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 8)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // PRINT_FUNCION ::= PRINT_OPTION ParAbierto OPERACION ParCerrado EndCom
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    String e1 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    tempVar e2 = (tempVar) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    semanticM.functions.correctStringPrint(e2, e1left, e1right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_FUNCION", 7, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // PRINT_OPTION ::= PrintN
                {
                    Boolean RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_OPTION", 8, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // PRINT_OPTION ::= PrintS
                {
                    Boolean RESULT = null;

                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRINT_OPTION", 8, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // SCAN_FUNCION ::= SCAN_OPTION ParAbierto Identificador ParCerrado EndCom
                {
                    Boolean RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)).right;
                    Integer e1 = (Integer) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)).value;
                    int e3left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).left;
                    int e3right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).right;
                    String e3 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 3)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).right;
                    String e2 = (String) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 2)).value;
                    semanticM.functions.correctScanner(e1, e2, e3left, e3right);
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SCAN_FUNCION", 9, ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // SCAN_OPTION ::= ScanN
                {
                    Integer RESULT = null;
                    RESULT = lanC.INTEGER;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SCAN_OPTION", 16, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // SCAN_OPTION ::= ScanS
                {
                    Integer RESULT = null;
                    RESULT = lanC.STRING;
                    CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SCAN_OPTION", 16, ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()), RESULT);
                }
                return CUP$sintactico$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$sintactico$act_num + "found in internal parse table");

            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$sintactico$do_action(
                int CUP$sintactico$act_num,
                java_cup.runtime.lr_parser CUP$sintactico$parser,
                java.util.Stack CUP$sintactico$stack,
                int CUP$sintactico$top)
                throws java.lang.Exception {
            return CUP$sintactico$do_action_part00000000(
                    CUP$sintactico$act_num,
                    CUP$sintactico$parser,
                    CUP$sintactico$stack,
                    CUP$sintactico$top);
        }
    }

}
